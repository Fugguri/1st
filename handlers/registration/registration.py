from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from keyboards import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.storage import FSMContext
from data_writer import add_items
from main import dp, bot, users
from asyncio import sleep


class MyStatesGroup(StatesGroup):
    full_name = State()
    age = State()
    phone = State()


# @ dp.message_handler(Text(equals="–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"), state="*")
# async def dont_allow_text(message: types.Message, state: FSMContext):
#     current_state = state.get_state()
#     if current_state is None:
#         return
#     await state.finish()
#     await message.reply("–û—Ç–º–µ–Ω–∏–ª\n/start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")


@dp.callback_query_handler(lambda call: call.data == "next")
async def save(callback: types.CallbackQuery):
    await MyStatesGroup.full_name.set()
    await sleep(1)
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û", reply_markup=clear_state())


@ dp.callback_query_handler(lambda call: call.data.startswith('c'))
async def reg_experience(callback: types.CallbackQuery):
    global number
    output = users[callback.message.chat.id]["–ù–∞–≤—ã–∫–∏"]
    if callback.data == 'c_servise':
        a = "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —Å–µ—Ä–≤–∏—Å"
        users[callback.message.chat.id]["–ù–∞–≤—ã–∫–∏"].append(a)
        if users[callback.message.chat.id]["–ù–∞–≤—ã–∫–∏"] == []:
            users[callback.message.chat.id]["–ù–∞–≤—ã–∫–∏"].append("-")

    if callback.data == 'c_tele_sales_b':
        a = "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ B2B"

        users[callback.message.chat.id]["–ù–∞–≤—ã–∫–∏"].append(a)

    if callback.data == 'c_tele_sales_c':
        a = "–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ B2C"

        users[callback.message.chat.id]["–ù–∞–≤—ã–∫–∏"].append(a)

    if callback.data == 'c_direct_sales_b':
        a = "–ü—Ä—è–º—ã–µ –ø—Ä–æ–¥–∞–∂–∏ B2B"
        users[callback.message.chat.id]["–ù–∞–≤—ã–∫–∏"].append(a)

    if callback.data == 'c_direct_sales_c':
        a = "–ü—Ä—è–º—ã–µ –ø—Ä–æ–¥–∞–∂–∏ B2C"
        users[callback.message.chat.id]["–ù–∞–≤—ã–∫–∏"].append(a)

    if callback.data in ['c_servise', 'c_tele_sales_b', 'c_tele_sales_c', 'c_direct_sales_b']:
        users[callback.message.chat.id]["–û—Ç–¥–µ–ª–µ–Ω–∏–µ"] = "–ö–æ–ª–ª —Ü–µ–Ω—Ç—Ä"
        await bot.send_message(chat_id=callback.message.chat.id,
                               text="–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <b>–∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞!</b>üìû \n–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ")
    else:
        users[callback.message.chat.id]["–û—Ç–¥–µ–ª–µ–Ω–∏–µ"] = "–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º"
        await bot.send_message(chat_id=callback.message.chat.id,
                               text="–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é <b>–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º!</b>üí∞ \n–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ")
    await MyStatesGroup.full_name.set()
    await bot.send_message(chat_id=callback.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û", reply_markup=clear_state())


@ dp.callback_query_handler(lambda call: call.data == 'Study YES')
async def reg(callback: types.CallbackQuery):
    users[callback.message.chat.id]["–ì–æ—Ç–æ–≤ –æ–±—É—á–∞—Ç—å—Å—è"] = "–î–∞"
    users[callback.message.chat.id]["–û—Ç–¥–µ–ª–µ–Ω–∏–µ"] = "–ö–æ–ª–ª —Ü–µ–Ω—Ç—Ä"
    users[callback.message.chat.id]["–ù–∞–≤—ã–∫–∏"] = []
    with open("hand.gif", "rb") as gif:
        await bot.send_animation(chat_id=callback.message.chat.id, animation=gif, caption='–û—Ç–ª–∏—á–Ω–æ, —Ç–æ–≥–¥–∞ —Ç–µ–±–µ –∫ –Ω–∞–º!\n–ü—Ä–∏–≥–ª–∞—à–∞–µ–º —Ç–µ–±—è –ø—Ä–æ–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ <b>–∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞!</b>üìû\n–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø–æ–ª–Ω–∏ —Ñ–æ—Ä–º—É –Ω–∏–∂–µ')
    await MyStatesGroup.full_name.set()

    await bot.send_message(chat_id=callback.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –§–ò–û", reply_markup=clear_state())


@ dp.message_handler(lambda message: message.text.count(" ") != 2 or message.text.isdigit(), state=MyStatesGroup.full_name)
async def chech_name(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é –∏ –æ—Ç—á–µ—Å—Ç–≤–æ.(–¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å—Å—è 3 —Å–ª–æ–≤–∞")


@ dp.message_handler(state=MyStatesGroup.full_name)
async def save_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["full_name"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç")
    await MyStatesGroup.next()


@ dp.message_handler(lambda message: not message.text.isdigit() or float(message.text) > 100, state=MyStatesGroup.age)
async def chech_age(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç(—Ü–∏—Ñ—Ä–∞–º–∏)")


@ dp.message_handler(state=MyStatesGroup.age)
async def save_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["age"] = message.text
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await MyStatesGroup.next()


@ dp.message_handler(lambda message: not message.text.isdigit() or 8 < len(message.text) > 12, state=MyStatesGroup.phone)
async def chech_age(message: types.Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä")


@ dp.message_handler(state=MyStatesGroup.phone)
async def save_age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["phone"] = message.text
        data["id"] = message.from_user.id
        data["city"] = users[message.from_user.id]["–ì–æ—Ä–æ–¥"]
        data["clients"] = users[message.from_user.id]["–†–∞–±–æ—Ç–∞–ª —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"]
        try:
            data["skills"] = users[message.from_user.id]["–ù–∞–≤—ã–∫–∏"]
        except ConnectionAbortedError:
            users[message.from_user.id]["–ù–∞–≤—ã–∫–∏"] = []
        finally:
            data["skills"] = users[message.from_user.id]["–ù–∞–≤—ã–∫–∏"]
        try:
            data["departament"] = users[message.from_user.id]["–û—Ç–¥–µ–ª–µ–Ω–∏–µ"]
        except ConnectionAbortedError:
            users[message.from_user.id]["–û—Ç–¥–µ–ª–µ–Ω–∏–µ"] = []
        finally:
            data["departament"] = users[message.from_user.id]["–û—Ç–¥–µ–ª–µ–Ω–∏–µ"]
    await state.finish()
    await message.answer("–û—Ç–ª–∏—á–Ω–æ‚úÖ\n–ú—ã –≤–µ—Ä–Ω–µ–º—Å—è —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (—Å 10.00 –¥–æ 19.00)")
    add_items(data)
